The assumptions regarding the data have remained unchanged. The new E/R diagram can be found in a separate document.

The database is being remotely hosted on Amazon Web Services. SQL files containing all table declarations as well as the insert statements to mirror the current state of the 
database are provided in the zip folder db_creation_scripts, while the raw data in CSV format is in db_as_csv.zip. Note that the database is over 300,000 rows in it and is 
nearly 1GB in 
size, so it might take a long time to load.

List of Tables:
The tables have remained the same, but the trip table now has the extra columns of 'origin' and 'destination' to allow a more intuitive lookup of a trip between two airports.
Additionally, all scraped ids are now hashes of the data in the table to try and ensure uniqueness of the id an not have a running counter, as the number of rows would quickly 
overflow the INTEGER type. Tables with changed schemas are shown below:

trip
====

id (CHAR(128)) PRIMARY KEY | booking_date (DATE) | price (float) | origin (CHAR(3)) | destination (CHAR(3))
---------------------------+---------------------+---------------+------------------+----------------------

flight
======

id (CHAR(128)) PRIMARY KEY | flight_code (VARCHAR 32) | depart_time (TIMESTAMP) | arrive (CHAR 3) | depart (CHAR(3)) | carrier (VARCHAR 64) 
---------------------------+--------------------------+------------------------+-----------------+------------------+---------------------

connectingflight
================

flight_id (CHAR 128) REFERENCES flight.id | trip_id (CHAR 128) REFERENCES trip.id
------------------------------------------+--------------------------------------

triptaker
=========

pid (INTEGER) REFERENCES people.id | tid (CHAR 128) REFERENCES trip.id
-----------------------------------+---------------------------------

Indexes:
No performance issues arose, so no changes were made to the DBMS's indexing schema. 

Platform:
The application now takes the form of a website. We decided to change the location of the application to a website rather than an android app because of the team’s general 
inexperience in developing an android app and because of worries of compatibility among different Android devices. Additionally, we are currently hosting the database remotely,
and we struggled to find a straightforward way to connect an Android app to a non-local database. The website has the same proposed layout as the android app and simply features
several inputs to enter a user’s flight destination and the date they would like to fly out. The app then displays the cheapest possible flight to the user and the date on which
they should purchase their ticket. The website was built using PHP and the current version was built using the instructions provided on the course webpage under “PHP tips”, as
well as help from StackOverflow and W3Schools. In the future, users will use the Facebook or Google API to log in, and the database will store their user data in the table (uid
and name). Additionally, we plan to add graph-based visualizations so that users can see the change in the ticket prices over time.